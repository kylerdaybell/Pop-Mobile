{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Token from \"../../Models/TokenModel\";\n\nvar APIUserService = function () {\n  function APIUserService() {\n    _classCallCheck(this, APIUserService);\n\n    this.url = \"http://206.189.218.168\";\n  }\n\n  _createClass(APIUserService, [{\n    key: \"Login\",\n    value: function Login(user) {\n      var newurl, body, headers, response, responseJson, token;\n      return _regeneratorRuntime.async(function Login$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              newurl = this.url + \"/Login\";\n              body = JSON.stringify({\n                User: user\n              });\n              headers = {\n                \"Content-Type\": \"application/json\"\n              };\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(newurl, {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: headers,\n                body: body\n              }));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              responseJson = _context.sent;\n\n              if (!(responseJson.Status == \"success\")) {\n                _context.next = 15;\n                break;\n              }\n\n              token = new Token(responseJson.accessToken);\n              return _context.abrupt(\"return\", token);\n\n            case 15:\n              throw Error(\"Login Failed\");\n\n            case 16:\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              return _context.abrupt(\"return\", null);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 18]], Promise);\n    }\n  }, {\n    key: \"Register\",\n    value: function Register(user) {\n      var newurl, body, headers, response, responseJson;\n      return _regeneratorRuntime.async(function Register$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              newurl = this.url + \"/Register\";\n              body = JSON.stringify({\n                User: user\n              });\n              headers = {\n                \"Content-Type\": \"application/json\"\n              };\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(fetch(newurl, {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: headers,\n                body: body\n              }));\n\n            case 6:\n              response = _context2.sent;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              responseJson = _context2.sent;\n              console.log(responseJson);\n\n              if (!(responseJson.Status == \"success\")) {\n                _context2.next = 15;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", true);\n\n            case 15:\n              throw Error(\"Registration Failed \" + responseJson.Message);\n\n            case 16:\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n              return _context2.abrupt(\"return\", false);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 18]], Promise);\n    }\n  }, {\n    key: \"Delete\",\n    value: function Delete(user, token) {\n      var newurl, body, headers, response, responseJson;\n      return _regeneratorRuntime.async(function Delete$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              newurl = this.url + \"/DeleteAccount\";\n              body = JSON.stringify({\n                User: user\n              });\n              headers = {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token.key\n              };\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(fetch(newurl, {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: headers,\n                body: body\n              }));\n\n            case 6:\n              response = _context3.sent;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              responseJson = _context3.sent;\n              console.log(responseJson);\n\n              if (!(responseJson.Status == \"success\")) {\n                _context3.next = 15;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", true);\n\n            case 15:\n              throw Error(\"Registration Failed \" + responseJson.Message);\n\n            case 16:\n              _context3.next = 22;\n              break;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(_context3.t0);\n              return _context3.abrupt(\"return\", false);\n\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[0, 18]], Promise);\n    }\n  }, {\n    key: \"Verify\",\n    value: function Verify(user, token) {\n      var newurl, body, headers, response, responseJson;\n      return _regeneratorRuntime.async(function Verify$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              newurl = this.url + \"/GetRoot\";\n              body = JSON.stringify({\n                User: user\n              });\n              console.error(token);\n              headers = {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token.key\n              };\n              _context4.next = 7;\n              return _regeneratorRuntime.awrap(fetch(newurl, {\n                method: \"GET\",\n                mode: \"cors\",\n                headers: headers,\n                body: body\n              }));\n\n            case 7:\n              response = _context4.sent;\n              _context4.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              responseJson = _context4.sent;\n              console.log(responseJson);\n\n              if (!(responseJson.Status == \"success\")) {\n                _context4.next = 16;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", true);\n\n            case 16:\n              throw Error(\"Registration Failed \" + responseJson.Message);\n\n            case 17:\n              _context4.next = 23;\n              break;\n\n            case 19:\n              _context4.prev = 19;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(_context4.t0);\n              return _context4.abrupt(\"return\", false);\n\n            case 23:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[0, 19]], Promise);\n    }\n  }]);\n\n  return APIUserService;\n}();\n\nexport { APIUserService as default };","map":{"version":3,"sources":["/home/kyler/Desktop/Pop-Mobile/popapp/Services/APIServices/APIUserService.tsx"],"names":["Token","APIUserService","url","user","newurl","body","JSON","stringify","User","headers","fetch","method","mode","response","json","responseJson","Status","token","accessToken","Error","console","error","log","Message","key"],"mappings":"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","sourcesContent":["import User from \"../../Models/UserModel\";\nimport Token from \"../../Models/TokenModel\";\n\nexport default class APIUserService{\n    readonly url = \"http://206.189.218.168\";\n    public async Login(user: User) : Promise<Token|null> {\n        try{\n            let newurl = this.url + \"/Login\";\n            let body = JSON.stringify({User:user});\n            let headers = { \"Content-Type\": \"application/json\" };\n            let response = await fetch(newurl, {\n                method: \"POST\",\n                mode:\"cors\",\n                headers: headers,\n                body: body\n            })\n            let responseJson = await response.json();\n            if(responseJson.Status == \"success\"){\n                let token = new Token(responseJson.accessToken)\n                return token;\n            }else{\n                throw Error(\"Login Failed\");\n            }\n\n        }catch(e){\n            console.error(e)\n            return null\n        }\n        \n    }\n\n    public async Register(user: User) : Promise<boolean>{\n        try{\n            let newurl = this.url + \"/Register\";\n            let body = JSON.stringify({User:user});\n            let headers = { \"Content-Type\": \"application/json\" };\n            let response = await fetch(newurl, {\n                method: \"POST\",\n                mode:\"cors\",\n                headers: headers,\n                body: body\n            })\n            let responseJson = await response.json();\n            console.log(responseJson)\n            if(responseJson.Status == \"success\"){\n                return true\n            }else{\n                throw Error(\"Registration Failed \" + responseJson.Message);\n            }\n\n        }catch(e){\n            console.error(e)\n            return false\n        }\n    }\n\n    public async Delete(user: User,token:Token) : Promise<boolean>{\n        try{\n            let newurl = this.url + \"/DeleteAccount\";\n            let body = JSON.stringify({User:user});\n            let headers = { \n                \"Content-Type\": \"application/json\" ,\n                \"Authorization\": \"Bearer \"+token.key\n            };\n            let response = await fetch(newurl, {\n                method: \"POST\",\n                mode:\"cors\",\n                headers: headers,\n                body: body\n            })\n            let responseJson = await response.json();\n            console.log(responseJson)\n            if(responseJson.Status == \"success\"){\n                return true\n            }else{\n                throw Error(\"Registration Failed \" + responseJson.Message);\n            }\n\n        }catch(e){\n            console.error(e)\n            return false\n        }\n    }\n\n    public async Verify(user: User,token:Token) : Promise<boolean>{\n        try{\n            let newurl = this.url + \"/GetRoot\";\n            let body = JSON.stringify({User:user});\n            console.error(token)\n            let headers = { \n                \"Content-Type\": \"application/json\" ,\n                \"Authorization\": \"Bearer \"+token.key\n            };\n            let response = await fetch(newurl, {\n                method: \"GET\",\n                mode:\"cors\",\n                headers: headers,\n                body: body\n            })\n            let responseJson = await response.json();\n            console.log(responseJson)\n            if(responseJson.Status == \"success\"){\n                return true\n            }else{\n                throw Error(\"Registration Failed \" + responseJson.Message);\n            }\n\n        }catch(e){\n            console.error(e)\n            return false\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}